package examples.tests.protocols.htmlReqRes

import lchannels.{In, Out}
import monitor.util.ConnectionManager
import scala.concurrent.ExecutionContext
import scala.concurrent.duration.Duration
import scala.util.control.TailCalls.{TailRec, done, tailcall}
class Monitor(external: ConnectionManager, internal: In[Get], max: Int, report: String => Unit)(implicit ec: ExecutionContext, timeout: Duration) extends Runnable {
	object payloads {
		object Get_3 {
			var s: String = _
		}
		object Sc200_1 {
			var s2: String = _
		}
		object Sc500_2 {
			var reason: String = _
		}
	}
	override def run(): Unit = {
		report("[MONITOR] Monitor started, setting up connection manager")
		external.setup()
		sendGet_3(internal, external, 0).result
    external.close()
  }
	def sendGet_3(internal: In[Get], external: ConnectionManager, count: Int): TailRec[Unit] = {
		internal ? {
			case msg @ Get(_) =>
				external.send(msg)
				payloads.Get_3.s = msg.s
				if (count < max) {
					receiveInternalChoice1(msg.cont, external, count+1)
				} else { tailcall(receiveInternalChoice1(msg.cont, external, 0)) }
			case msg @ _ => report(f"[MONITOR] VIOLATION unknown message: $msg"); done()
		}
	}
	def receiveInternalChoice1(internal: Out[InternalChoice1], external: ConnectionManager, count: Int): TailRec[Unit] = {
		external.receive() match {
			case msg @ Sc200(_)=>
				internal ! msg; done()
			case msg @ Sc500(_)=>
				if(!util.checkString(payloads.Get_3.s)){
					internal ! msg; done()
				} else {
				report("[MONITOR] VIOLATION in Assertion: !util.checkString(s)"); done() }
			case msg @ _ => report(f"[MONITOR] VIOLATION unknown message: $msg"); done()
		}
	}
}